/*
The engine is the part that reads and executes source code. - uses interpreter and compiler

The interpreter executes source code almost immediately
The compiler generates machine code which the user’s system executes directly.

As the compiler works on the machine code generation, it applies optimisations.
= faster code execution


 engine flags frequently executed code parts as a “Hot Path” and passes them to the compiler
 - lets the compiler adapt and optimise the code for the current context.
We call the compiler’s behaviour “Just in Time” or simply JIT.


Inline Caching - optimization technique

js pipeline

Parser converts source code to Abstract Syntax Tree (AST)

Interpreter uses AST to generate bytecode - can be executed by virtual machine (not machine code)
When it runs bytecode, it collects profiling data (used to speed up execution)
When a function is 'hot' (its run often), interpreter passes generated bytecode and profiling data to compiler

Compiler takes bytecode produces optimized machine code

Different engines have different numbers of compilers to produce optimized code

Objects are acc dictionaries - properties are acc string keys mapped to property attributes
Attributes: value, writeable, configurable, enumberable - ECMA spec
Values assigned to obj properties go in property attribute of key

Arrays like objects - keys are indices - length is a key in arrays, with the value set to the length

Objects have same shape if they have same property keys
- Shapes stored seperately from values to save memory - aka hidden classes
- keys have offset instead of value to go to info

New shape created with new property everytime new property added to object
- added to transition chain- links all older shapes together so you don't duplicate properties
- initialize objects the same way so they have sam shape
- make all objects to have the same shape to save memory and improve speed

IC - memorizes where to find properties on onjects - so dont have to repeat property lookup
- remember shape of object the fxn is called with and offset of property
- don't have to find offset index when fxn called again with a dif obj

All elements of arrays are default - stored in elements backing store - only stores values
*/